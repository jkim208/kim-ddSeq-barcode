@HD	VN:1.5	SO:duplicate
@RG	ID:A	SM:testing
M02850:227:000000000-ATG1H:1:1101:11711:1306	141	*	0	0	*	*	0	0	NTTCCCGCACCTCCAGTCTTCTGTGTAGCAGCTTTAAACCACGTTTGTCTGTCACGTCCAGTCCCGAGACGGCTGATTAGTTAGAGGTATTTCAGTACGGT	#881@,,==<8)8DDE><*;*=*0*;FFFFFD,0?DF,C6F@,:666;;,6<;F@6,,8C<66,;6B+@6,,77+	RG:Z:A	XC:Z:ATTAGTTAGAGGTATTTC	XM:Z:AGTACGGT
M02850:227:000000000-ATG1H:1:1101:12629:1306	141	*	0	0	*	*	0	0	NGACCACGCGTCCATCCAGATGAACGTGGCCGAGGATGATAGGACCACAGGCCGGTTTAATGGCCAGATTAAAAATTAAGAGCGCGGATACTTTGATTGTT	#6A@C?D659>)=>D7:DEEEFEEE<?*33*3+3++-,;,C,,C6,C6F8,,6++++6CF<,,,,C<,,6CFGG,	RG:Z:A	XC:Z:TTAAGAGCGCGGATACTT	XM:Z:TGATTGTT
M02850:227:000000000-ATG1H:1:1101:13348:1306	141	*	0	0	*	*	0	0	NTTAGAGAGTGCACTGAGATTCGGTAACCCCCTTCTGGTCCAGGAACATGGATGGAGCTGGAGGCCATTATCCTCACTGCAGTCCTAACCTTCGTATCCTC	#8,@CEG8>5:=DEEEBEEEDD=5@55;4**0=6,=CC;CCEE<FCFGFDEE9FECGGCGG8FEDCEF96EFFGG	RG:Z:A	XC:Z:ACTGCAGTCCTAACCTTC	XM:Z:GTATCCTC
M02850:227:000000000-ATG1H:1:1101:14389:1305	141	*	0	0	*	*	0	0	NTATCTGATGTGTGAGCACCATGCATGCAATGTGTGGACAGACATCAGATACTGTTGTTCATGCAACTTCCCGAGTGAATTCTAGGTACAAGGGATGCTAA	#8A@8@FGFB7;95*;=D=DDFEFFFFB99DB9?@?@E<EFFFGD9FFFGFDFFFFDGGCFFFFF,EFGGGGG,@	RG:Z:A	XC:Z:TGAATTCTAGGTACAAGG	XM:Z:GATGCTAA
M02850:227:000000000-ATG1H:1:1101:15138:1306	141	*	0	0	*	*	0	0	NTCGAATCACGCTCACCAGCCGCAACGTGAAGTCGCAGGAGAAGGTATGTGCGGACTTGATCAGAAGCGCCAAGGGTTAACAGTCTGTGTGTAGCCGGGTC	#8A=CFF>5?)05==:)D5D)*11=89:::D93=00+,+8,,E<<6,,,<6,@+@++,:C@<FCF,9,7@@FB8,	RG:Z:A	XC:Z:GTTAACAGTCTGTGTGTA	XM:Z:GCCGGGTC
M02850:227:000000000-ATG1H:1:1101:8854:1305	141	*	0	0	*	*	0	0	NTGTTATGCTGATGTGCAGAAGGATGGAGTGGGGATGGTCGAGTATCTCAGAAAAGAAGACATGGAATCTGCCCTCTCAATGGTAGGGGTGCTTGCCGCCC	#8?,>8C=>EEED70;DEBE)0)88850;0**=*8?@C-C6@:;C6<,,C,EFGG8666,C<@C<6C969,@,CC	RG:Z:A	XC:Z:CTCAATGGTAGGGGTGCT	XM:Z:TGCCGCCC
M02850:227:000000000-ATG1H:1:1101:8976:1306	141	*	0	0	*	*	0	0	NTAATAGGGTGTGGAATGTCGTCAGTGGCAAACATTTCACAGATTTTTATTTTGTTTCTGTCTTCAACATTTTTGCCGATGAGCACGCAACCGTACCCTGA	#8AACCF?):=58)88DBDE<?DDF>D5AD+:?DDFGFFGFE,FGFGGCFGD9EDCFEEFFGGGGCCFCBFFGGE	RG:Z:A	XC:Z:CCGATGAGCACGCAACCG	XM:Z:TACCCTGA

def correct_bc_blocks(all_barcode_blocks, barcode_block):
    # Function 2 "correct_bc_blocks" takes each barcode_block from a sequence, checks the hamming distances
    # between the variable block and all 96 possible blocks, and makes corrections depending on the smallest
    # ED(edit distance) found. Barcode block is unchanged if smallest ED is 2.

    hamming_dict = {}

    # determine hamming distances between barcode block and all 96 possible blocks

    for i in range(95):
        hamming_dict[i] = (distance.hamming(barcode_block, all_barcode_blocks[i]))

    # find the blocks with the smallest hamming distances
    shd_index = min(hamming_dict, key=hamming_dict.get)

    if hamming_dict[shd_index] == 1:
    #    print('Fix barcode to the one which is 1 ED apart')
        barcode_block = all_barcode_blocks[shd_index]
    #elif hamming_dict[shd_index] == 2:
    #    print('Smallest ED is 2. Barcode will be not be changed.')
    #elif hamming_dict[shd_index] > 2:
    #    print('Smallest ED is > 2.')

    # print('Adjusted barcode is:' + all_barcode_blocks[shd_index])
    return barcode_block

         3936681 function calls (3936507 primitive calls) in 13.352 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        4    0.000    0.000    0.000    0.000 :0(add)
     4731    0.008    0.000    0.008    0.000 :0(append)
        2    0.004    0.002    0.004    0.002 :0(close)
        9    0.000    0.000    0.000    0.000 :0(compile)
        3    0.004    0.001    0.004    0.001 :0(discard)
       72    0.000    0.000    0.000    0.000 :0(endswith)
      181    0.000    0.000    0.000    0.000 :0(extend)
     7057    0.016    0.000    0.016    0.000 :0(find)
     4690    0.052    0.000    0.052    0.000 :0(findall)
     7140    0.036    0.000    0.036    0.000 :0(get)
        3    0.000    0.000    0.000    0.000 :0(getattr)
     9380    0.040    0.000    0.040    0.000 :0(group)
        1    0.000    0.000    0.000    0.000 :0(groups)
       19    0.000    0.000    0.000    0.000 :0(hasattr)
      310    0.000    0.000    0.000    0.000 :0(isinstance)
       26    0.000    0.000    0.000    0.000 :0(items)
        1    0.000    0.000    0.000    0.000 :0(iter)
     2013    0.004    0.000    0.004    0.000 :0(join)
635564/635553    1.028    0.000    1.028    0.000 :0(len)
        1    0.000    0.000    0.000    0.000 :0(lstrip)
     2348    0.072    0.000    0.072    0.000 :0(match)
        5    0.000    0.000    0.000    0.000 :0(max)
       45    0.000    0.000    0.000    0.000 :0(min)
        5    0.000    0.000    0.000    0.000 :0(nl_langinfo)
        3    0.000    0.000    0.000    0.000 :0(open)
    40733    0.072    0.000    0.072    0.000 :0(ord)
       38    0.000    0.000    0.000    0.000 :0(pop)
        8    0.000    0.000    0.000    0.000 :0(range)
        1    0.000    0.000    0.000    0.000 :0(read)
        2    0.000    0.000    0.000    0.000 :0(readline)
        4    0.000    0.000    0.000    0.000 :0(remove)
        1    0.000    0.000    0.000    0.000 :0(replace)
        6    0.000    0.000    0.000    0.000 :0(reverse)
        1    0.000    0.000    0.000    0.000 :0(rfind)
     4355    0.012    0.000    0.012    0.000 :0(rstrip)
        4    0.000    0.000    0.000    0.000 :0(setattr)
       48    0.000    0.000    0.000    0.000 :0(setdefault)
       15    0.000    0.000    0.000    0.000 :0(setlocale)
        1    0.004    0.004    0.004    0.004 :0(setprofile)
     4358    0.008    0.000    0.008    0.000 :0(split)
        1    0.000    0.000    0.000    0.000 :0(splitlines)
      361    0.004    0.000    0.004    0.000 :0(startswith)
       24    0.000    0.000    0.000    0.000 :0(stat)
   317580    4.000    0.000    7.520    0.000 :0(sum)
        6    0.000    0.000    0.000    0.000 :0(translate)
       48    0.000    0.000    0.000    0.000 :0(unichr)
     2012    0.012    0.000    0.012    0.000 :0(write)
   317581    0.764    0.000    0.764    0.000 :0(zip)
        1    0.000    0.000   13.348   13.348 <string>:1(<module>)
        3    0.000    0.000    0.000    0.000 UserDict.py:103(__contains__)
        6    0.000    0.000    0.000    0.000 UserDict.py:35(__getitem__)
        3    0.000    0.000    0.000    0.000 UserDict.py:91(get)
        4    0.000    0.000    0.000    0.000 _regex_core.py:1060(parse_flag_set)
        4    0.000    0.000    0.000    0.000 _regex_core.py:1076(parse_flags)
        4    0.000    0.000    0.000    0.000 _regex_core.py:1107(parse_flags_subpattern)
        2    0.000    0.000    0.000    0.000 _regex_core.py:1142(parse_positional_flags)
       12    0.000    0.000    0.000    0.000 _regex_core.py:1426(parse_set)
       12    0.000    0.000    0.000    0.000 _regex_core.py:1492(parse_set_imp_union)
       48    0.000    0.000    0.000    0.000 _regex_core.py:1515(parse_set_member)
       48    0.000    0.000    0.000    0.000 _regex_core.py:1556(parse_set_item)
       25    0.000    0.000    0.000    0.000 _regex_core.py:1849(make_sequence)
      144    0.000    0.000    0.000    0.000 _regex_core.py:1856(__init__)
       12    0.000    0.000    0.000    0.000 _regex_core.py:1859(with_flags)
       35    0.000    0.000    0.000    0.000 _regex_core.py:1879(fix_groups)
       23    0.000    0.000    0.000    0.000 _regex_core.py:1882(optimise)
       23    0.000    0.000    0.000    0.000 _regex_core.py:1885(pack_characters)
        5    0.000    0.000    0.000    0.000 _regex_core.py:1900(get_firstset)
        5    0.000    0.000    0.000    0.000 _regex_core.py:1903(has_simple_start)
     72/5    0.000    0.000    0.000    0.000 _regex_core.py:1906(compile)
       18    0.000    0.000    0.000    0.000 _regex_core.py:1909(is_empty)
        8    0.000    0.000    0.000    0.000 _regex_core.py:1921(get_required_string)
        3    0.000    0.000    0.000    0.000 _regex_core.py:1926(__init__)
        3    0.000    0.000    0.000    0.000 _regex_core.py:1932(get_firstset)
        3    0.000    0.000    0.000    0.000 _regex_core.py:1935(_compile)
        3    0.000    0.000    0.000    0.000 _regex_core.py:1949(max_width)
        6    0.000    0.000    0.000    0.000 _regex_core.py:1959(_compile)
        3    0.000    0.000    0.000    0.000 _regex_core.py:1968(max_width)
       48    0.000    0.000    0.000    0.000 _regex_core.py:2484(__init__)
       48    0.000    0.000    0.000    0.000 _regex_core.py:2504(optimise)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2680(__init__)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2715(fix_groups)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2718(pack_characters)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2732(_compile)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2769(max_width)
       36    0.000    0.000    0.000    0.000 _regex_core.py:2828(__init__)
       18    0.000    0.000    0.000    0.000 _regex_core.py:2834(fix_groups)
       18    0.000    0.000    0.000    0.000 _regex_core.py:2837(optimise)
       18    0.000    0.000    0.000    0.000 _regex_core.py:2842(pack_characters)
        3    0.000    0.000    0.000    0.000 _regex_core.py:2859(get_firstset)
       18    0.000    0.000    0.000    0.000 _regex_core.py:2866(_compile)
        6    0.000    0.000    0.000    0.000 _regex_core.py:2903(get_required_string)
       28    0.000    0.000    0.000    0.000 _regex_core.py:2917(__init__)
       14    0.000    0.000    0.000    0.000 _regex_core.py:2925(fix_groups)
       14    0.000    0.000    0.000    0.000 _regex_core.py:2929(optimise)
       14    0.004    0.000    0.004    0.000 _regex_core.py:2934(pack_characters)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2950(get_firstset)
        2    0.000    0.000    0.000    0.000 _regex_core.py:2953(has_simple_start)
       14    0.000    0.000    0.000    0.000 _regex_core.py:2956(_compile)
        5    0.000    0.000    0.000    0.000 _regex_core.py:2991(get_required_string)
        9    0.000    0.000    0.000    0.000 _regex_core.py:3345(__init__)
        3    0.000    0.000    0.000    0.000 _regex_core.py:3352(fix_groups)
        3    0.000    0.000    0.000    0.000 _regex_core.py:3356(optimise)
        3    0.000    0.000    0.004    0.001 _regex_core.py:3368(pack_characters)
        3    0.000    0.000    0.004    0.001 _regex_core.py:3419(get_firstset)
        3    0.000    0.000    0.000    0.000 _regex_core.py:3432(has_simple_start)
        3    0.000    0.000    0.000    0.000 _regex_core.py:3435(_compile)
       24    0.000    0.000    0.000    0.000 _regex_core.py:3450(_flush_characters)
        5    0.000    0.000    0.000    0.000 _regex_core.py:349(_flatten_code)
        3    0.000    0.000    0.000    0.000 _regex_core.py:3542(get_required_string)
       12    0.000    0.000    0.000    0.000 _regex_core.py:3558(__init__)
       90    0.000    0.000    0.000    0.000 _regex_core.py:357(make_case_flags)
       12    0.000    0.000    0.000    0.000 _regex_core.py:3604(_handle_case_folding)
        6    0.000    0.000    0.000    0.000 _regex_core.py:3634(max_width)
       12    0.000    0.000    0.000    0.000 _regex_core.py:3756(optimise)
       12    0.000    0.000    0.000    0.000 _regex_core.py:3776(_compile)
       26    0.000    0.000    0.000    0.000 _regex_core.py:3841(__init__)
       14    0.000    0.000    0.000    0.000 _regex_core.py:3869(_compile)
        3    0.000    0.000    0.000    0.000 _regex_core.py:3886(get_required_string)
     21/7    0.000    0.000    0.004    0.001 _regex_core.py:390(_parse_pattern)
        7    0.000    0.000    0.000    0.000 _regex_core.py:3995(__init__)
     21/7    0.004    0.000    0.004    0.001 _regex_core.py:400(parse_sequence)
      317    0.000    0.000    0.000    0.000 _regex_core.py:4007(get)
       16    0.000    0.000    0.000    0.000 _regex_core.py:4073(get_while)
      289    0.000    0.000    0.000    0.000 _regex_core.py:4150(match)
       14    0.000    0.000    0.000    0.000 _regex_core.py:4189(expect)
        5    0.000    0.000    0.000    0.000 _regex_core.py:4193(at_end)
        7    0.000    0.000    0.000    0.000 _regex_core.py:4218(__init__)
       14    0.000    0.000    0.000    0.000 _regex_core.py:4237(open_group)
       14    0.000    0.000    0.000    0.000 _regex_core.py:4263(close_group)
        5    0.000    0.000    0.000    0.000 _regex_core.py:4280(_check_group_features)
        5    0.000    0.000    0.000    0.000 _regex_core.py:4319(_get_required_string)
       18    0.000    0.000    0.000    0.000 _regex_core.py:447(apply_quantifier)
        2    0.000    0.000    0.000    0.000 _regex_core.py:484(apply_constraint)
       56    0.000    0.000    0.000    0.000 _regex_core.py:507(append_literal)
       20    0.000    0.000    0.000    0.000 _regex_core.py:517(parse_quantifier)
       24    0.000    0.000    0.000    0.000 _regex_core.py:532(is_above_limit)
       14    0.000    0.000    0.000    0.000 _regex_core.py:536(parse_limited_quantifier)
        2    0.000    0.000    0.000    0.000 _regex_core.py:566(parse_fuzzy)
        2    0.000    0.000    0.000    0.000 _regex_core.py:587(parse_fuzzy_item)
        2    0.000    0.000    0.000    0.000 _regex_core.py:597(parse_cost_constraint)
        2    0.000    0.000    0.000    0.000 _regex_core.py:658(parse_cost_limit)
        2    0.000    0.000    0.000    0.000 _regex_core.py:670(parse_constraint)
        2    0.000    0.000    0.000    0.000 _regex_core.py:680(parse_fuzzy_compare)
       16    0.000    0.000    0.000    0.000 _regex_core.py:728(parse_count)
    78/40    0.000    0.000    0.004    0.000 _regex_core.py:732(parse_literal_and_element)
       18    0.000    0.000    0.004    0.000 _regex_core.py:804(parse_paren)
  2223060    3.520    0.000    3.520    0.000 _simpledists.py:22(<genexpr>)
   317580    2.704    0.000   12.016    0.000 _simpledists.py:3(hamming)
        1    0.000    0.000    0.000    0.000 argparse.py:1160(__init__)
        3    0.000    0.000    0.004    0.001 argparse.py:1182(__init__)
       34    0.000    0.000    0.000    0.000 argparse.py:1234(register)
        8    0.000    0.000    0.000    0.000 argparse.py:1238(_registry_get)
        3    0.004    0.001    0.004    0.001 argparse.py:1263(add_argument)
        2    0.000    0.000    0.000    0.000 argparse.py:1310(add_argument_group)
        3    0.000    0.000    0.000    0.000 argparse.py:1320(_add_action)
        2    0.000    0.000    0.000    0.000 argparse.py:1384(_get_positional_kwargs)
        1    0.000    0.000    0.000    0.000 argparse.py:1400(_get_optional_kwargs)
        3    0.000    0.000    0.000    0.000 argparse.py:1435(_pop_action_class)
        3    0.000    0.000    0.000    0.000 argparse.py:1439(_get_handler)
        3    0.000    0.000    0.000    0.000 argparse.py:1448(_check_conflict)
        2    0.000    0.000    0.000    0.000 argparse.py:1486(__init__)
        3    0.000    0.000    0.000    0.000 argparse.py:1508(_add_action)
        3    0.000    0.000    0.000    0.000 argparse.py:154(__init__)
        1    0.000    0.000    0.008    0.008 argparse.py:1556(__init__)
        2    0.000    0.000    0.000    0.000 argparse.py:1602(identity)
        3    0.000    0.000    0.000    0.000 argparse.py:1680(_add_action)
        1    0.000    0.000    0.000    0.000 argparse.py:1692(_get_positional_actions)
        1    0.000    0.000    0.004    0.004 argparse.py:1700(parse_args)
        1    0.000    0.000    0.004    0.004 argparse.py:1707(parse_known_args)
        1    0.000    0.000    0.004    0.004 argparse.py:1742(_parse_known_args)
        2    0.004    0.002    0.004    0.002 argparse.py:1789(take_action)
        1    0.000    0.000    0.004    0.004 argparse.py:1887(consume_positionals)
        3    0.000    0.000    0.000    0.000 argparse.py:199(__init__)
        1    0.000    0.000    0.000    0.000 argparse.py:2039(_match_arguments_partial)
        2    0.000    0.000    0.000    0.000 argparse.py:2055(_parse_optional)
        2    0.000    0.000    0.000    0.000 argparse.py:2156(_get_nargs_pattern)
        2    0.000    0.000    0.000    0.000 argparse.py:2200(_get_values)
        2    0.000    0.000    0.000    0.000 argparse.py:2252(_get_value)
        2    0.000    0.000    0.000    0.000 argparse.py:2277(_check_value)
        3    0.000    0.000    0.000    0.000 argparse.py:2326(_get_formatter)
        3    0.000    0.000    0.000    0.000 argparse.py:557(_metavar_formatter)
        3    0.000    0.000    0.000    0.000 argparse.py:566(format)
        3    0.000    0.000    0.000    0.000 argparse.py:573(_format_args)
        3    0.000    0.000    0.000    0.000 argparse.py:765(__init__)
        2    0.000    0.000    0.000    0.000 argparse.py:807(__init__)
        2    0.000    0.000    0.000    0.000 argparse.py:836(__call__)
        8    0.000    0.000    0.000    0.000 argparse.py:95(_callable)
        1    0.000    0.000    0.000    0.000 argparse.py:983(__init__)
     7035    0.528    0.000   12.544    0.002 decode.py:144(correct_bc_blocks)
     7035    0.072    0.000    0.144    0.000 decode.py:176(check_bc_quality)
     2010    0.032    0.000    0.044    0.000 decode.py:194(append_barcode)
        1    0.000    0.000    0.000    0.000 decode.py:30(get_ref_barcode_blocks)
        1    0.020    0.020   13.332   13.332 decode.py:40(read_and_write_sam)
     2345    0.124    0.000   13.252    0.006 decode.py:74(extract_barcode)
        1    0.000    0.000   13.348   13.348 decode.py:8(main)
       24    0.000    0.000    0.000    0.000 genericpath.py:23(exists)
        6    0.000    0.000    0.000    0.000 gettext.py:132(_expand_lang)
        3    0.000    0.000    0.004    0.001 gettext.py:424(find)
        3    0.000    0.000    0.004    0.001 gettext.py:479(translation)
        3    0.000    0.000    0.004    0.001 gettext.py:545(dgettext)
        3    0.000    0.000    0.004    0.001 gettext.py:583(gettext)
        6    0.000    0.000    0.000    0.000 locale.py:365(normalize)
       15    0.000    0.000    0.000    0.000 locale.py:566(setlocale)
        5    0.000    0.000    0.000    0.000 locale.py:610(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 posixpath.py:112(basename)
       24    0.000    0.000    0.004    0.000 posixpath.py:61(join)
        1    0.000    0.000   13.352   13.352 profile:0(main())
        0    0.000             0.000          profile:0(profiler)
        1    0.000    0.000    0.000    0.000 re.py:138(match)
        9    0.000    0.000    0.004    0.000 re.py:192(compile)
       10    0.000    0.000    0.004    0.000 re.py:230(_compile)
     2345    0.024    0.000    0.172    0.000 regex.py:247(match)
     4690    0.028    0.000    0.196    0.000 regex.py:326(findall)
     7035    0.144    0.000    0.192    0.000 regex.py:419(_compile)
        5    0.000    0.000    0.000    0.000 regex.py:588(<genexpr>)
        4    0.000    0.000    0.000    0.000 sre_compile.py:228(_compile_charset)
        4    0.000    0.000    0.000    0.000 sre_compile.py:256(_optimize_charset)
        9    0.000    0.000    0.000    0.000 sre_compile.py:428(_simple)
        4    0.000    0.000    0.000    0.000 sre_compile.py:433(_compile_info)
        8    0.000    0.000    0.000    0.000 sre_compile.py:546(isstring)
        4    0.000    0.000    0.004    0.001 sre_compile.py:552(_code)
        4    0.000    0.000    0.004    0.001 sre_compile.py:567(compile)
     17/4    0.000    0.000    0.004    0.001 sre_compile.py:64(_compile)
       45    0.000    0.000    0.000    0.000 sre_parse.py:137(__len__)
        4    0.000    0.000    0.000    0.000 sre_parse.py:139(__delitem__)
       77    0.000    0.000    0.000    0.000 sre_parse.py:141(__getitem__)
        9    0.000    0.000    0.000    0.000 sre_parse.py:145(__setitem__)
       25    0.000    0.000    0.000    0.000 sre_parse.py:149(append)
    26/13    0.000    0.000    0.000    0.000 sre_parse.py:151(getwidth)
        4    0.000    0.000    0.000    0.000 sre_parse.py:189(__init__)
       46    0.000    0.000    0.000    0.000 sre_parse.py:193(__next)
       22    0.000    0.000    0.000    0.000 sre_parse.py:206(match)
       39    0.000    0.000    0.000    0.000 sre_parse.py:212(get)
        8    0.000    0.000    0.000    0.000 sre_parse.py:268(_escape)
      6/4    0.000    0.000    0.000    0.000 sre_parse.py:317(_parse_sub)
      7/5    0.000    0.000    0.000    0.000 sre_parse.py:395(_parse)
        4    0.000    0.000    0.000    0.000 sre_parse.py:67(__init__)
        4    0.000    0.000    0.000    0.000 sre_parse.py:706(parse)
        2    0.000    0.000    0.000    0.000 sre_parse.py:74(opengroup)
        2    0.000    0.000    0.000    0.000 sre_parse.py:85(closegroup)
       17    0.000    0.000    0.000    0.000 sre_parse.py:92(__init__)